;Interface for choosing drawer accessories 
;All changes to drawer box parts are in another UCS
For Each DWR part 

; Enable Debug
public debug<int> = 0		

if this._dwr_Accessories_v2 == NULL then
	_dwr_Accessories_v2<bool> = TRUE 
	_dwr_Accessories_v2<style> = 2
	_dwr_Accessories_v2<desc> = 'DO NOT DELETE'
	
	delete _dwr_AccSelector
	delete _dwr_topOrLeft       
	delete _dwr_bottomOrRight   
	delete _dwr_drawerDesign    
	delete _dwr_insertCode_1    
	delete _dwr_insertCode_2    
	delete _dwr_insertCode_3    
	delete _dwr_insertCode_4    
	delete _dwr_insertCode_5    
	delete _dwr_insertCode_6    
	delete _dwr_insertCode_7    
	delete _dwr_insertCode_8    
	delete _dwr_insertCode_9    
	delete _dwr_designCode_1    
	delete _dwr_designCode_2    
	delete _dwr_designCode_3    
	delete _dwr_designCode_4    
	delete _dwr_code
	delete _dwr_AccessoryCost
	delete _dwr_customCost
	delete _dwr_customDesc
	
	delete _dwr_AccExists

end if

; bail out if not drawer box opening
if :STYPE != 2 then		
	delete _dwr_accessoryLayout			
	delete _dwr_Acc1
	delete _dwr_Acc2		
	delete _dwr_Acc3	
	delete _dwr_Acc4
	delete _dwr_code
	delete _dwr_AccessoryCost
	
	delete _dwr_Accessory_X
	delete _dwr_Accessory_A
	delete _dwr_Accessory_B
	delete _dwr_Accessory_C
	delete _dwr_Accessory_D
	delete _dwr_Accessory_E
	delete _dwr_Accessory_F
	delete _dwr_Accessory_G
	delete _dwr_Accessory_H
	delete _dwr_Accessory_I
	
	delete _dwr_CanisterCount

	exit
end if              

; bail out if not dovetail box   
if :.BF.CONSTID != 23 AND :.BF.CONSTID != 25 then
	delete _dwr_accessoryLayout			
	delete _dwr_Acc1
	delete _dwr_Acc2		
	delete _dwr_Acc3	
	delete _dwr_Acc4
	delete _dwr_code
	delete _dwr_AccessoryCost
	
	delete _dwr_Accessory_X
	delete _dwr_Accessory_A
	delete _dwr_Accessory_B
	delete _dwr_Accessory_C
	delete _dwr_Accessory_D
	delete _dwr_Accessory_E
	delete _dwr_Accessory_F
	delete _dwr_Accessory_G
	delete _dwr_Accessory_H
	delete _dwr_Accessory_I
	
	delete _dwr_CanisterCount

	exit
end if	

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;  Initial user interface	    ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    
if this._dwr_AccSelector == NULL then
	_dwr_AccSelector<int> = <lst>'00 None=-1|01 Configure=1|02 Fixed Dividers=2|03 Movable Dividers=3|04 Canister Drawer=4|05 Bread Drawer=5|06 File Drawer=6|07 Lateral File Drawer=7|08 Tray Drawer=8|09 Peg Drawer=9'
end if 
	_dwr_AccSelector<style> = 1
	_dwr_AccSelector<desc> = '50 Drawer Accessory'	
	 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;  Test for user selections   ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
if _dwr_AccSelector == -1 then
; no accessories
	delete _dwr_accessoryLayout			
	delete _dwr_Acc1
	delete _dwr_Acc2		
	delete _dwr_Acc3	
	delete _dwr_Acc4
	delete _dwr_code
	delete _dwr_AccessoryCost
	
	delete _dwr_Accessory_X
	delete _dwr_Accessory_A
	delete _dwr_Accessory_B
	delete _dwr_Accessory_C
	delete _dwr_Accessory_D
	delete _dwr_Accessory_E
	delete _dwr_Accessory_F
	delete _dwr_Accessory_G
	delete _dwr_Accessory_H
	delete _dwr_Accessory_I
	
	delete _dwr_CanisterCount

	exit
end if

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;  Drawer will get insert(s) based on the calculator below  ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
if _dwr_AccSelector == 1 then
    ;base price for smallest accessory
 	_dwr_Accessory_X<dec> := 0	; 	none
	_dwr_Accessory_A<dec> := 49	;	silverware slider
	_dwr_Accessory_B<dec> := 15	;	silverware dividers
	_dwr_Accessory_C<dec> := 49	;	utensil slider
	_dwr_Accessory_D<dec> := 15	;	utensil dividers
	_dwr_Accessory_E<dec> := 49	;	knife block slider
	_dwr_Accessory_F<dec> := 86	;	knife block bottom
	_dwr_Accessory_G<dec> := 39	;	cutting board slider
	_dwr_Accessory_H<dec> := 42.5	;	spice insert
	_dwr_Accessory_I<dec> := 75	;	K-Cup slider
  		
	_dwr_topAccessories<text> = 'X: None = X|A: Silverware Slider=A|C: Utensil Slider=C|E: Knife Block Slider=E|G: Cutting Bd Slider=G|I: K-Cup Slider=I'
	_dwr_bottomAccessories<text> = 'X: None = X|B: Silverware Dividers=B|D: Utensil Dividers=D|F: Knife Block Bottom=F|H: Spice Insert=H'
	
	if _dwr_accessoryLayout == NULL then
		_dwr_accessoryLayout<text> = <lst>'A: Full Width=A|B: Equally Divided=B|C: Unequally Divided=C'
	end if
		_dwr_accessoryLayout<style> = 1
		_dwr_accessoryLayout<desc> = '51 Drawer Layout'
    
    ;left top
	if _dwr_Acc1 == NULL then
		_dwr_Acc1<text> = <lst>'{_dwr_topAccessories}'
	end if
		_dwr_Acc1<style> = 1
		_dwr_Acc1<desc> = '52 Left Top'			
             
    ;left bottom         
	if _dwr_Acc2 == NULL then
		_dwr_Acc2<text> = <lst>'{_dwr_bottomAccessories}'
	end if
		_dwr_Acc2<style> = 1
		_dwr_Acc2<desc> = '53 Left Bottom'
    
    ;right top
	if _dwr_Acc3 == NULL then
		_dwr_Acc3<text> = <lst>'{_dwr_topAccessories}'
	end if
		_dwr_Acc3<desc> = '54 Right Top'
	
	;right bottom	
	if _dwr_Acc4 == NULL then
		_dwr_Acc4<text> = <lst>'{_dwr_bottomAccessories}'
	end if
		_dwr_Acc4<desc> = '55 Right Bottom'

	; set the right two accessory codes to 'X' for none when layout is full width. Otherwise, allow user to change them
	if _dwr_accessoryLayout == 'A' then	
		_dwr_Acc3<text> = 'X'
		_dwr_Acc3<style> = 0
		
		_dwr_Acc4<text> = 'X'
		_dwr_Acc4<style> = 0
	else
		_dwr_Acc3<style> = 1
		_dwr_Acc4<style> = 1
	end if	

	; set base cost	
	_dwr_AccessoryCost<dec> := 0
	_dwr_AccessoryCost<dec> := _dwr_Accessory_{_dwr_Acc1} + _dwr_Accessory_{_dwr_Acc2} + _dwr_Accessory_{_dwr_Acc3} + _dwr_Accessory_{_dwr_Acc4}
          
	; loop through all 4 possible accessories and upcharge for width
	i<int> := 1          
    while i <= 4 do       
    	if _dwr_Acc{i} != 'X' then
    		if _dwr_Acc{i} != 'H' then
				if :DX <= 19 then
					_dwr_AccessoryCost<dec> += 0
				else
					if _dwr_accessoryLayout == 'A' then
						; check for width upcharges on full-width layout
						if :DX <= 25 then
							if this._dwr_Acc{i} == 'I' then
								_dwr_AccessoryCost<dec> += 8
							else	
								_dwr_AccessoryCost<dec> += 5
							end if		
						else
							if this._dwr_Acc{i} == 'I' then
								_dwr_AccessoryCost<dec> += 20
							else	
								_dwr_AccessoryCost<dec> += 10
							end if	
						end if
					else
						_dwr_AccessoryCost<dec> += 0
						; assumption is that since the drawer is divided it won't get a width upcharge
					end if
				end if
    		else
    			; Accessory H = spice
    			if _dwr_accessoryLayout == 'A' then ; check for drawer that is too wide for spice
	    			if :DX > 25.25 then
    					_dwr_AccessoryCost<dec> += _dwr_Accessory_H ; add another insert if the box is too wide
					end if
    			end if
    		end if
    	end if
    	
    	i += 1
    end while    	
	
	_dwr_code<text> = '{_dwr_accessoryLayout}-{_dwr_Acc1}{_dwr_Acc2}-{_dwr_Acc3}{_dwr_Acc4}'
	; code to pass to the DWR_OPEN^^
                         
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;  Create labels for the accessories
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	if cab._c_showLabels == TRUE then
		i<int> := 1 
		while i <= 4 do		
			if _dwr_Acc{i} != 'X' then
				dim RED as new part
	;				RED.X = -20
					RED.dz = 0.25
					RED.Z = 1
					RED.EDX = -DX 
;					RED.owner = DWR_OPEN				
				
				; pick a library part label based on the accessory code
				if _dwr_Acc{i} ==  'A' then
					RED.libpart = 'Parts\UCS\labels\SW Slider Label'
					RED.desc = 'zSilverware Slider'
				else
					if _dwr_Acc{i} ==  'B' then
						RED.libpart = 'Parts\UCS\labels\SW Dividers Label'
						RED.desc = 'zSilverware Dividers'
					else
						if _dwr_Acc{i} ==  'C' then
							RED.libpart = 'Parts\UCS\labels\Utnsl Slider Label'
							RED.desc = 'zUtensil Slider'
						else
							if _dwr_Acc{i} ==  'D' then
								RED.libpart = 'Parts\UCS\labels\Utnsl Dividers Label'
								RED.desc = 'zUtensil Slider'
							else
								if _dwr_Acc{i} ==  'E' then
									RED.libpart = 'Parts\UCS\labels\Knife Block Slider Label'
									RED.desc = 'zKnife Block Slider'
								else
									if _dwr_Acc{i} ==  'F' then
										RED.libpart = 'Parts\UCS\labels\Knife Block Label'
										RED.desc = 'zKnife Block'
									else
										if _dwr_Acc{i} ==  'G' then
											RED.libpart = 'Parts\UCS\labels\Cutting Bd Slider Label'
											RED.desc = 'Cutting Board Slider'
										else
											if _dwr_Acc{i} ==  'H' then
												RED.libpart = 'Parts\UCS\labels\Spice Insert Label'
												RED.desc = 'zSpice Insert'
											else
												if _dwr_Acc{i} ==  'I' then
													RED.libpart = 'Parts\UCS\labels\K-Cup Slider Label'
													RED.desc = 'zK-Cup Slider'
												end if
											end if
										end if
									end if
								end if
							end if
						end if
					end if
				end if
 
				; set label Y value
				if i == 1 or i == 3 then  ; values are top accessories
					RED.Y = :DY*0.95 - DY
				else
					RED.Y = :DY*2/5 - DY
				end if
					
				; set label X value
				if _dwr_accessoryLayout == 'A' then  
					; design is full width. Center labels
					RED.X = :DX/2 - DX/2            
				else
					if _dwr_accessoryLayout == 'B' then
						; labels come outward from the middle
						if i == 1 or i == 2 then  	; left accessories
							RED.X = :DX*0.48 - DX
							;RED.X = :DX*0.25 - DX/2
						else						; right accessories
							RED.X = :DX*0.52
							;RED.X = :DX*0.75 - DX/2
						end if	
					else
						if _dwr_accessoryLayout == 'C' then
							; labels come inward from the edges of the drawer
							if i == 1 or i == 2 then  	; left accessories
								RED.X = 0 
							else						; right accessories
								RED.X = :DX - DX
							end if						
						end if
					end if
					
				end if
			end if
			i += 1
		end while			
   	end if  ; cab._c_showLabels == TRUE then    
   	
   	if debug == 1 then    	
		dim DRAWER as new part                                      
			DRAWER.owner = cab
			DRAWER.name = 'Drawer Accessories = ${_dwr_AccessoryCost}'
			DRAWER.visible = FALSE
	end if
   	   
   	   
   	exit
   	
else ; _dwr_AccSelector == 1
	delete _dwr_accessoryLayout			
	delete _dwr_Acc1
	delete _dwr_Acc2		
	delete _dwr_Acc3	
	delete _dwr_Acc4
	delete _dwr_code
	delete _dwr_AccessoryCost
	
	delete _dwr_Accessory_X
	delete _dwr_Accessory_A
	delete _dwr_Accessory_B
	delete _dwr_Accessory_C
	delete _dwr_Accessory_D
	delete _dwr_Accessory_E
	delete _dwr_Accessory_F
	delete _dwr_Accessory_G
	delete _dwr_Accessory_H
	delete _dwr_Accessory_I
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;  Drawer is getting a standard accessory	  ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 

	_dwr_AccessoryCost<dec> := 0
	
	dim RED as new part
		;RED.X = 20
		RED.Z = 1
		;RED.EDX = -DX  
		RED.X = :DX/2 - DX/2
		RED.Y = :DY*0.9 - DY
		RED.owner = DWR_OPEN
	
	if _dwr_AccSelector == 2 then  ; Fixed Dividers
		delete _dwr_CanisterCount
	
		if cab._c_showLabels == TRUE then
			RED.libpart = 'Parts\UCS\labels\Fixed Dividers label' 
		end if
		
		_dwr_AccessoryCost<dec> := 0 ; priced in drawer box pricing UCS
		
		_dwr_code<text> = 'FDIV'
	else
		if _dwr_AccSelector == 3 then  ; Movable Dividers
			delete _dwr_CanisterCount
		
			if cab._c_showLabels == TRUE then
				RED.libpart = 'Parts\UCS\labels\Movable Dividers label' 
			end if		                  
			
			_dwr_AccessoryCost<dec> := 0 ; priced in drawer box pricing UCS
			
			_dwr_code<text> = 'MDIV'
		else
			if _dwr_AccSelector == 4 then  ; Canister Drawer
			    
			    if this._dwr_CanisterCount == NULL then
			    	_dwr_CanisterCount<int> = 0               
			    end if
			    	_dwr_CanisterCount<style> = 1
			    	_dwr_CanisterCount<desc> = '51 Canister Qty:'	
			    	
				if cab._c_showLabels == TRUE AND this._dwr_CanisterCount > 0 then
					RED.libpart = 'Parts\UCS\labels\Canister Drawer label' 
				end if		                                                    
				
				_dwr_AccessoryCost<dec> := _dwr_CanisterCount * 7 ; $7 per canister 
				
				_dwr_code<text> = 'CAN'
			else
				if _dwr_AccSelector == 5 then  ; bread drawer
					delete _dwr_CanisterCount
				    
				    if cab._c_showLabels == TRUE then
						RED.libpart = 'Parts\UCS\labels\Bread drawer label'
					end if
					
					_dwr_AccessoryCost<dec> := (:DX * :DY / 144) * 0.85 + 10 ; cost of a top (same as bottom) + $10 
						
					_dwr_code<text> = 'BD'
				else
					if _dwr_AccSelector == 6 then  ; file drawer
						delete _dwr_CanisterCount
						
					    if cab._c_showLabels == TRUE then
							RED.libpart = 'Parts\UCS\labels\file drawer label'
						end if		                 
						
						_dwr_AccessoryCost<dec> := 7
							
						_dwr_code<text> = 'FD'
					else
						if _dwr_AccSelector == 7 then  ; Lateral file drawer
							delete _dwr_CanisterCount
							
						    if cab._c_showLabels == TRUE then
								RED.libpart = 'Parts\UCS\labels\lateral file drawer label'
							end if
							
							_dwr_AccessoryCost<dec> := 7
								
							_dwr_code<text> = 'LFD'
						else
							if _dwr_AccSelector == 8 then  ; Tray drawer  
								delete _dwr_CanisterCount
								
							    if cab._c_showLabels == TRUE then
									RED.libpart = 'Parts\UCS\labels\Tray drawer label'
								end if
								 
								_dwr_AccessoryCost<dec> := trunc((:DX - 1.25)/4.625) * 12 ; $12 per divider. 4" minimum between 
									
								_dwr_code<text> = 'CTD'
							else
								if _dwr_AccSelector == 9 then  ; Peg drawer                                                       	
									delete _dwr_CanisterCount                                                                      
									                                                                                               
								    if cab._c_showLabels == TRUE then                                                              
										RED.libpart = 'Parts\UCS\labels\Peg drawer label'                                         
									end if                                                                                         
									
									if :DX <= 25 then
										_dwr_AccessoryCost<dec> := 95
									else               
									    _dwr_AccessoryCost<dec> := 100
									end if                                                                                   
									_dwr_code<text> = 'PEG'
								end if                                                                        
							end if  ; _dwr_AccSelector == 8 		
						end if  ; _dwr_AccSelector == 7
					end if  ; _dwr_AccSelector == 6
				end if  ; _dwr_AccSelector == 5						
			end if  ; _dwr_AccSelector == 4		
		end if  ; _dwr_AccSelector == 3
	end if  ; _dwr_AccSelector == 2
	
	if debug == 1 then    	
		dim DRAWER as new part                                      
			DRAWER.owner = cab
			DRAWER.name = 'Drawer Accessories = ${_dwr_AccessoryCost}'
			DRAWER.visible = FALSE
	end if
end if ; _dwr_AccSelector == 1
